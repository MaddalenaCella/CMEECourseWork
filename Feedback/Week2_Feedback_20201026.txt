Starting code feedback for Maddalena, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.61 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Week3, .git, Feedback, Week1, Week2

Found the following files in parent directory: README.md, .gitignore, .DS_Store, temp.py

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*~ 
*.tmp

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## CMEECourseWork

This repository contains code, data and results for the example provided in the Course Book **The Multilingual Quantitative Biologist** and for the assignments.

Additional line of information text about what the project does. Your introduction should be around 2 or 3 sentences. Don't go overboard, people won't read it.

## Prerequisites

Before you begin, ensure you have met the following requirements:
* you have a Linux or Mac machine
* bash version: 3.2.57(1)-release 
* python3 version: 3.7.3
* r version: 3.5.1

* You have installed the latest version of `<coding_language/dependency/requirement_1>`
* You have a `<Windows/Linux/Mac>` machine. State which OS is supported/which is not.

## Topics covered each week
`Week1` : bash, git, Latex #the brackets should be facing the other way!!!
`Week2` : python3 

## Content of Data subdirectories

All the data required to run each week's script(s) and the outputs of data manipulation can be found in `Week?/Data/`.

## Content of Code subdirectories

All the scripts and programs can be found in `Week?/Code/`.

## Content of Results subdirectories

All the outputs of scripts and programs that produce a new output #modify this please

## Using CMEECourseWork

To use the code the scripts present in this directory, simply run the code on your terminal.

## Contributors

Thanks to the following people who have contributed to this project:

* [@mhasoba](https://github.com/mhasoba)
* [@ph-u] (https://github.com/ph-u)
* group 4 team members: Billy B Lam, Yewshen Lim, Benjamin James Nouhan, Mohamad Muhieddine and Cong Liu.

## Contact

If you want to contact me you can reach me at <mc2820@ic.ac.uk>.

## License

This project uses the following license: Apache-2.0.
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: Week1, Week2, Week3

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: data, code, Results, Sandbox

Found the following files: README.md, .gitignore, .DS_Store

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## Week2

Week2 is a folder containing scripts and programs written in Python programming language (in Code), as well as the input files necessary to run those script (in Data) and their outputs (in Results). Python test files can be found in the Sandbox subdirectory.
 

## Prerequisites

Before you begin, ensure you:

* have a Linux or Mac machine. 
* have a code editor (for example Visual Studio Code, Atom, WIM, etc...)
* have Python 3 version: 3.7.3

It is adviced you install the Python package 'ipython' by:
```sh
pip install python ipython
```
or 
```sh
sudo apt install python ipython
```

## Content of Code subdirectory

In the Code sub-directory you can find the following pyhton files in alphabetical order:

* align_seqs.py : program that takes the DNA sequences as an input from a single external file from `Week3/Data/` directory and saves the best alignment along with its corresponding score in a single text file on `Week3/Results/` directory.

* basic_csv.py : script that shows the use of Python's csv package 

* basic_io1.py : script that shows how to import data in python

* basic_io2.py : script that shows how to import data in python 

* basic_io3.py : script that shows how to store objects and save them for later use using 'pickle' 

* boilerplate.py : example of Python program

* cfexercises1.py : modified Python code to make it a program that evaluates all the foo_x functions

* cfexercises2.py : functions that use loops and conditionals

* control_flow.py : example of program that uses control statements

* debugme.py : example of a function with a bug

* dictionary.py : Python list comprehension exercise 4

* lc1.py : Python list comprehension exercise 1

* lc2.py : Python list comprehension exercise 2

* loops.py : script containing examples of both for and whie loops

* oaks.py : script that finds which species are oak trees from a list of tree taxa

* scope.py : script containing blocks of code to explain variable scope

* sysargv.py : script to explain sys.argv

* tuple.py : python list comprehension exercise 3

* using_name.py : script that illustrates the use of modules

## Content of Data subdirectory

In the Data sub-directory you can find the following .csv files:

* bodymass.csv: available at (https://github.com/mhasoba/TheMulQuaBio/tree/master/content/data)

* testcsv.csv: the output file of basic_csv.py

And another .csv file I created containing two DNA sequences to align:

* seqs.csv

## Running Python files

To run the python scripts make sure you are in the correct directory `Week3/Code/` and run them on Bash:

```sh
pyhton3 <script_name> 
```
or:
```sh
ipython <script_name>
```
Or from within the ipython shell:

```sh
run <script_name>
``` 

## Contributors

Thanks to [@mhasoba](https://github.com/mhasoba) for teaching me the skills to ba able to perform the Week1 assignments, my group (group 4) and PokMan [@ph-u](https://github.com/ph-u) for the incredible help and support.

## Contact

If you want to contact me you can reach me at <mc2820@ic.ac.uk>.
**********************************************************************

Found following files in results directory: alignment.txt...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

 0.5 pts deducted per results file 

Current Points = 99.5

Found 20 code files: tuple.py, boilerplate.py, basic_io2.py, oaks.py, cfexercises2.py, basic_io1.py, oaks.debugme.py, loops.py, dictionary.py, lc2.py, basic_io3.py, control_flow.py, cfexercises1.py, basic_csv.py, debugme.py, align_seqs.py, sysargv.py, scope.py, lc1.py, using_name.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Author: Maddalena Cella mc2820@ic.ac.uk
# Script: tuple.py
# Description: python list comprehension exercise
# Date: October 2020

""" Python list comprehensions 3 """
__appname__="tuple.py"
__author__="Maddalena Cella mc2820@ic.ac.uk"
__version__="0.0.1"
__license__="None"

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

for line in birds:
    print("Latin name:", line[0], "\n", "Common name:", line[1], "\n", "Average weigth:", line[2], "\n")

**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
Latin name: Passerculus sandwichensis 
 Common name: Savannah sparrow 
 Average weigth: 18.7 

Latin name: Delichon urbica 
 Common name: House martin 
 Average weigth: 19 

Latin name: Junco phaeonotus 
 Common name: Yellow-eyed junco 
 Average weigth: 19.5 

Latin name: Junco hyemalis 
 Common name: Dark-eyed junco 
 Average weigth: 19.6 

Latin name: Tachycineata bicolor 
 Common name: Tree swallow 
 Average weigth: 20.2 


**********************************************************************

Code ran without errors

Time consumed = 0.07451s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Description of this program or application.
	You can use several lines"""

__appname__ = '[application name here]'
__author__ = 'Maddalena Cella (mc2820@ic.ac.uk)'
__version__ = '0.0.1'
__license__ = "None"

## imports ##
import sys # module to interface our program with the operating system

## constants ##
'''
def foo(x,y): #this is just an example
    print(x)
    print(y)
'''
## functions ##
def main(argv): #argv: will only have name of the function--> currently it has no input
    #but internally here you can pass stuff that will be inputted in the function you define before (foo)
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    #foo(1,2)
    return 0

if __name__ == "__main__": 
    """Makes sure the "main" function is called from command line"""  
    status = main(sys.argv)
    sys.exit("I am exiting right now!")
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
This is a boilerplate

**********************************************************************

Encountered error (or warning):
I am exiting right now!

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io2.py", line 7, in <module>
    f = open('../sandbox/testout.txt','w')
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testout.txt'

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)])
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 95.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'Quercus robur', 'Quercus petraea', 'Quercus cerris'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}
{'QUERCUS PETRAEA', 'QUERCUS ROBUR', 'QUERCUS CERRIS'}

**********************************************************************

Code ran without errors

Time consumed = 0.07724s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************

for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
     if j % 5 == 3:
        print('hello')
     elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.08045s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#############################
# FILE INPUT
#############################
# Open a file for reading
f = open('../sandbox/test.txt', 'r')
# use "implicit" for loop:
# if the object is a file, python will cycle over lines
for line in f:
    print(line)

# close the file
f.close()

# Same example, skip blank lines
f = open('../sandbox/test.txt', 'r')
for line in f:
    if len(line.strip()) > 0:
        print(line)

f.close()

**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io1.py", line 5, in <module>
    f = open('../sandbox/test.txt', 'r')
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

======================================================================
Inspecting script file oaks.debugme.py...

File contents are:

**********************************************************************

import csv
import sys

#Define function
def is_an_oak(name):
    """ Returns True if name is starts with 'quercus' """
    return name.lower().startswith('quercus')

def main(argv): 
    f = open('../data/TestOaksData.csv','r')
    g = open('../data/JustOaksData.csv','w')
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]):
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])    

    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)
**********************************************************************

Testing oaks.debugme.py...

oaks.debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 90.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "oaks.debugme.py", line 27, in <module>
    status = main(sys.argv)
  File "oaks.debugme.py", line 11, in main
    f = open('../data/TestOaksData.csv','r')
FileNotFoundError: [Errno 2] No such file or directory: '../data/TestOaksData.csv'

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.64633s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Author: Maddalena Cella mc2820@ic.ac.uk
# Script: dictionary.py
# Description: python list comprehension exercise
# Date: October 2020

""" Python list comprehensions 4 """
__appname__="dictionary.py"
__author__="Maddalena Cella mc2820@ic.ac.uk"
__version__="0.0.1"
__license__="None"

taxa_dic = taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa.
taxa_dic = { } #create a dictionary grouped by order name
for elements in taxa:
    if elements[1] not in taxa_dic: 
        #add order name to directory if it does not exist
        taxa_dic[elements[1]] = [] 
    #add the species name to the list
    taxa_dic[elements[1]].append(elements[0])
print(taxa_dic)

# An example output is:
#  
# 'Chiroptera' : set(['Myotis lucifugus']) ... etc.
#  OR,
# 'Chiroptera': {'Myotis lucifugus'} ... etc
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************
{'Chiroptera': ['Myotis lucifugus'], 'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus']}

**********************************************************************

Code ran without errors

Time consumed = 0.14113s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Author: Maddalena Cella mc2820@ic.ac.uk
# Script: lc2.py
# Description: python list comprehension exercise
# Date: October 2020

""" Python list comprehensions 2 """
__appname__="lc2.py"
__author__="Maddalena Cella mc2820@ic.ac.uk"
__version__="0.0.1"
__license__="None"

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
)

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
over100 = [rainfall[line][:] for line in range(len(rainfall)) if rainfall[line][1] > 100]
print (over100)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 
less50 = [rainfall[line][:] for line in range(len(rainfall)) if rainfall[line][1] < 50]
print (less50)

# (3) Now do (1) and (2) using conventional loops (you can choose to do 
# this before 1 and 2 !)

over100 = []
for line in rainfall:
    if line[1] > 100 : #and both[1] not in over100:
        over100.append(line) #index out of range problem
print (over100)

less50 = []
for line in rainfall:
    if line[1] < 50 :
        less50.append(line)
print (less50)

# A good example output is:
#
# Step #1:
# Months and rainfall values when the amount of rain was greater than 100mm:
# [('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
# ... etc.

**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.0

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
[('MAR', 49.9), ('SEP', 27.0)]

**********************************************************************

Code ran without errors

Time consumed = 0.08828s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 86.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io3.py", line 9, in <module>
    f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/testp.p'

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Samraat Pawar (s.pawar@imperial.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 85.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.07359s

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Author: Maddalena Cella mc2820@ic.ac.uk
# Script: cfexercises1.py
# Description: python writing program with control flows
# Date: October 2020

""" Modify python code to make it a program """
__appname__="cfexercises1.py"
__author__="Maddalena Cella mc2820@ic.ac.uk"
__version__="0.0.1"
__license__="None"


import sys

def foo_1(x):
""" a function that returns the power of 0.5 of any x inputed"""
    return x ** 0.5

def foo_2(x, y):
""" a function that returns the biggest value out of two that get inputed """
    if x > y:
        return x
    return y

def foo_3(x, y, z):
""" a function that stops when z is the smallest value """
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x):
""" a function that returns the product of the numbers in the range from 1 to any x plus 1 """
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

#the factorial is the product of all positive integers less then or equal to n [n * (n-1) * (n-2) * ...]
def foo_5(x): 
""" a recursive function that calculates the factorial of x """
    if x == 1:
        return 1
    return x * foo_5(x - 1)
  
def foo_6(x): 
""" a function that calculates the factorial of x in a different way """  
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto

""" make foo_x a program that evaluates all the foo_x functions """
def main(argv):
    print(foo_1(3))
    print(foo_2(4, 3))
    print(foo_3(4, 3, 2))
    print(foo_4(2))
    print(foo_5(6))
    print(foo_6(6))
    return 0

if __name__ == "__main__": 
    status = main(sys.argv) 
    sys.exit(status)

**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 85.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
  File "cfexercises1.py", line 18
    """ a function that returns the power of 0.5 of any x inputed"""
    ^
IndentationError: expected an indented block

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
f = open('../data/testcsv.csv','r')

csvread = csv.reader(f)
temp = []
for row in csvread:
    temp.append(tuple(row))
    print(row)
    print("The species is", row[0])

f.close()

# write a file containing only species name and Body mass
f = open('../data/testcsv.csv','r')
g = open('../data/bodymass.csv','w')

csvread = csv.reader(f)
csvwrite = csv.writer(g)
for row in csvread:
    print(row)
    csvwrite.writerow([row[0], row[4]])

f.close()
g.close()
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 83.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.08519s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
'''def makeabug(x):
    y = x**4
    z = 0.
    y = y/z
    return y

makeabug(25) '''

def buggyfunc(x)
    y = x
    for i in range(x):
        y = y-1
        z = x/y
    return z
    
buggyfunc(18) #by the 20th iteration y will be 0 and you cannot divide by 0

#sometimes code cannot be debugged
def buggyfunc(x):
    y = x
    for i in range(x):
        try: 
            y = y-1
            z = x/y
        except:
            print(f"This didn't work; x = {x}; y = {y}")
    return z

buggyfunc(20)

def buggyfunc(x):
    y = x
    for i in range(x):
        try: 
            y = y-1
            z = x/y
        except ZeroDivisionError: #python recognises this error
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; x = {x}; y = {y}")
        else:
            print(f"OK; x = {x}; y = {y}, z = {z};")
    return z

buggyfunc(20)
**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 80.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
  File "debugme.py", line 9
    def buggyfunc(x)
                   ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Author: Maddalena Cella mc2820@ic.ac.uk
# Script: align_seqs.py
# Description: program that takes DNA sequences from .csv file and aligns them
# Input: seqs.cvs from ../data/ directory
# Output: alignment.txt to ../results/ directory
# Date: October 2020

""" This Program takes DNA sequences from an external .csv file
    and saves the best alignment and score in a new text file """
__appname__="align_seqs.py"
__author__ = "Maddalena Cella (mc2820@ic.ac.uk)"
__version__ = "0.0.1"
__license__="None"

import sys

#input
seqs_f = open('../data/seqs.csv','r')

seqs = seqs_f.readlines() #readlines() splits file into lines
seq1 = seqs[0]
seq2 = seqs[1]

l1 = len(seq1)
l2 = len(seq2)

if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    #print("." * startpoint + matched)           
    #print("." * startpoint + s2)
    #print(s1)
    #print(score) 
    #print(" ")

    return score

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

#output
sys.stdout = open('../results/alignment.txt','w')

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2
        my_best_score = z 
        
        print(my_best_align) 
        print(s1)
        print("Best score:", my_best_score)

sys.stdout.close()


**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 79.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "align_seqs.py", line 64, in <module>
    sys.stdout = open('../results/alignment.txt','w')
FileNotFoundError: [Errno 2] No such file or directory: '../results/alignment.txt'

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: " , str(sys.argv))
**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 77.5

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.06823s

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#using the global specification converted _a_global to a truly global variable
#that became available outside that function (overwriting the original _a_global).

_a_global = 10

print("Outside the function, the value of _a_global is", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    
    print("Inside the function, the value of _a_global is ", _a_global)
    print("Inside the function, the value _a_local is ", _a_local)
    
    return None

a_function()

print("Outside the function, the value of _a_global now is", _a_global)

# using the global keyword inside the inner function _a_function2 resulted in changing the 
#value of _a_global in the main worspace / namespace to 20, but within the scope of _a_function, remained 10!

def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)
    
    return None

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)

#because _a_global was defined in advance (outside the first function), it get modified when
#changes in the inner function (it does not exist as a local within the scope of _a_function, 
#but is “inherited” from the main scope / workspace / namespace)

_a_global = 10

def a_function():

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function, value of _a_global is ", _a_global)

    _a_function2()
    
    print("After calling _a_function2, value of _a_global is ", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is ", _a_global)
**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more functions, but completely missing docstrings
2 pts deducted for missing docstring for script, and .5 pt deducted per missing docstring for function

Current Points = 73.0

Output (only first 500 characters): 


**********************************************************************
Outside the function, the value of _a_global is 10
Inside the function, the value of _a_global is  5
Inside the function, the value _a_local is  4
Outside the function, the value of _a_global now is 5
Before calling a_function, value of _a_global is  10
After calling _a_function2, value of _a_global is  10
The value of a_global in main workspace / namespace is  20
Before calling a_function, value of _a_global is  10
After calling _a_function2, value of _a_global is  20
The value of a_global in ma
**********************************************************************

Code ran without errors

Time consumed = 0.07268s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

# Author: Maddalena Cella mc2820@ic.ac.uk
# Script: lc1.py
# Description: python list comprehension exercise
# Date: October 2020

""" Python list comprehensions 1 """
__appname__="lc1.py"
__author__="Maddalena Cella mc2820@ic.ac.uk"
__version__="0.0.1"
__license__="None"

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively. 

BirdLatin = [(birds [0] [0]), (birds [1] [0]), (birds [2] [0]), (birds [3] [0]), (birds [4] [0])]
print ("The latin names of the bird species are:", BirdLatin)

BirdCommon = [(birds [0] [1]), (birds [1] [1]), (birds [2] [1]), (birds [3] [1]), (birds [4] [1])]
print ("The common names of the previously listed bird species are:", BirdCommon)

BirdMass = [(birds [0] [2]), (birds [1] [2]), (birds [2] [2]), (birds [3] [2]), (birds [4] [2])]
print ("The mean body mass for each birdspecies is:", BirdMass)


# (2) Now do the same using conventional loops (you can choose to do this 
# before 1 !). 
BirdLatin = []
BirdCommon = []
BirdMass = []

for l, c, m in birds:
    BirdLatin.append(l)
    BirdMass.append(m)
    BirdCommon.append(c)
    
print ("The latin names of the bird species are:", BirdLatin)
print ("The common names of the previously listed bird species are:", BirdCommon)
print ("The mean body mass for each birdspecies is:", BirdMass)

**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 73.0

Output (only first 500 characters): 


**********************************************************************
The latin names of the bird species are: ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
The common names of the previously listed bird species are: ['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
The mean body mass for each birdspecies is: [18.7, 19, 19.5, 19.6, 20.2]
The latin names of the bird species are: ['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemal
**********************************************************************

Code ran without errors

Time consumed = 0.08882s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)
**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 71.0

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.08425s

======================================================================
======================================================================
Finished running scripts

Ran into 8 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 71.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!