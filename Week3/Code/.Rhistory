load(KeyWestAnnualMeanTemperature.Rdata)
?load
load("/Users/maddalenacella/Downloads/KeyWestAnnualMeanTemperature.RData")
plot(data_set)
data_set <- load("/Users/maddalenacella/Downloads/KeyWestAnnualMeanTemperature.RData")
plot(data_set)
head(data_set)
view(ats)
data_set <- load("../data/ats.RData")
str(data_set)
load("../data/ats.RData", data_set <- new.env())
ls.str(data_set)
plot(data_set)
plot(data_set$Year, data_set$Temp)
?plot
plot(Year, Temp)
plot(data_set[:1], data_set[:2])
plot(data_set)
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
plot(data_set)
?cor
head(data_set)
corr_succ <- data.frame(data_set[:2][data_set[:1] -1], data_set[:2][data_set[:1]])
type(data_set)
class(data_set)
corr_succ <- data.frame(data_set[[:2]][data_set[[:1]] -1], data_set[[:2]][data_set[[:1]]])
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
?cor
r_value <- corr(corr_succ, method="spearman")
r_value <- cor(corr_succ, method="spearman")
lapply(1:10000, cor(corr_succ, method="spearman"))
?sample
sample(data_set[,2], data_set[,1], replace= FALSE) #random permutation 
np<- 10000
f<- rep(NA,np)
i <- 1
for(x in 1:np){
    corr_perm<-sample(data_set[,2], data_set[,1], replace= FALSE) #random permutation 
    corr_succ<-data.frame(corr_perm[,2][corr_perm[,1] -1], corr_perm[,2][corr_perm[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
np<- 10000
f<- rep(NA,np)
i <- 1
for(x in 1:np){
    corr_perm<-sample(data_set[,2], dim(data_set)[1], replace = F) #random permutation 
    corr_succ<-data.frame(corr_perm[,2][corr_perm[,1] -1], corr_perm[,2][corr_perm[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
?sample
?sample
?sample
np<- 10000
length(data_set[,1])
f<- rep(NA,np)
i <- 1
for(x in 1:np){
    corr_perm<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(corr_perm[,2][corr_perm[,1] -1], corr_perm[,2][corr_perm[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
np<- 10000
length(data_set[,1])
f<- rep(NA,np)
i <- 1
for(x in 1:np){
    corr_perm<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(corr_perm[,2][corr_perm[,1] -1], corr_perm[,2][corr_perm[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
warnings()
np<- 10000
length(data_set[,1])
f<- rep(NA,np)
i <- 1
for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
q
np<- 10000
for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    f[i] <-cor(corr_succ, method="spearman")
    i<- i+1
}
np<- 10000
for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    corr_coeff <-cor(corr_succ, method="spearman")
}
r_value
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
r_value <- unlist(cor(corr_succ, method="spearman"))[1,2]
r_value
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2]
    i<- i+1
}
length(a[which(a>b)])/length(a)
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman"))[1,2]
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2]
    i<- i+1
}
length(a[which(a>b)])/length(a)
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman"))
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) 
    i<- i+1
}
length(a[which(a>b)])/length(a)
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,1], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2] 
    i<- i+1
}
length(a[which(a>b)])/length(a)
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2] 
    i<- i+1
}
#calculation of the p-value
length(a[which(a>b)])/length(a)
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,2], data_set[,1], replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2] 
    i<- i+1
}
#calculation of the p-value
length(a[which(a>b)])/length(a)
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1;for(x in 1:np){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2] 
    i<- i+1
}
#calculation of the p-value
length(a[which(a>b)])/length(a)
?rep
source("TAutoCorr.R")
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
#repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
np<- 10000
a <- rep(NA,np)
i<-1
for(x in 1:np){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #random permutation 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a[i] <-unlist(cor(corr_succ, method="spearman")) [1,2] 
    i<- i+1
}
#calculation of the p-value
length(a[which(a>b)])/length(a) #p-value of 0<- significant autocorrelation of temperature between years
?rep
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
# repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
#np<- 10000
#a <- rep(x,10000)
#i<-1
for(x in 1:10000){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #shuffle data 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a <-unlist(cor(corr_succ, method="spearman")) [1,2] #Spearman correlation of new pairs generated by random permutation
}
#calculation of the p-value
length(a[which(a>b)])/length(a) 
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- (data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
# repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
#np<- 10000
#a <- rep(x,10000)
#i<-1
for(x in 1:10000){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #shuffle data 
    corr_succ<-(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a <-unlist(cor(corr_succ, method="spearman")) [1,2] #Spearman correlation of new pairs generated by random permutation
}
#calculation of the p-value
length(a[which(a>b)])/length(a) #p-value of 0<- significant autocorrelation of temperature between years
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
# repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
#np<- 10000
#a <- rep(x,10000)
#i<-1
for(x in 1:10000){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #shuffle data 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a <-unlist(cor(corr_succ, method="spearman")) [1,2] #Spearman correlation of new pairs generated by random permutation
}
#calculation of the p-value
length(a[which(a>b)])/length(a) #p-value of 0<- significant autocorrelation of temperature between years
rm(list= ls())
data_set <- get(load("../data/ats.RData"))
ls.str(data_set)
plot(data_set)
class(data_set)
#data points are not independent 
#correlation between successive years T [n-1] vs T[n]
corr_succ <- data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
b <- unlist(cor(corr_succ, method="spearman")) [1,2]
# repeat it 10000 times randomly permuting the time series
# sample() can generate random permutation 
for(x in 1:10000){
    corr_succ<-sample(data_set[,2], length(data_set[,1]), replace = FALSE) #shuffle data 
    corr_succ<-data.frame(data_set[,2][data_set[,1] -1], data_set[,2][data_set[,1]])
    a <-unlist(cor(corr_succ, method="spearman")) [1,2] #Spearman correlation of new pairs generated by random permutation
}
#calculation of the p-value
length(a[which(a>b)])/length(a) #p-value of 0<- significant autocorrelation of temperature between years
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
head(MyData)
MyMetaData
head(MyMetaData)
MyMetaData <- read.csv("../data/PoundHillMetaData.csv",header = TRUE,  sep=";")
head(MyMetaData)
MyMetaData
MyData <- t(MyData) 
head(MyData)
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F)
head(TempData)
colnames(TempData) <- MyData[1,] # assign column names from original data
head(TempData)
rownames(TempData) <- NULL
head(TempData)
require(reshape2)# load the reshape2 package
install.packages("reshape2")
require(reshape2)
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
head(MyWrangledData); tail(MyWrangledData)
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
require(tidyverse)
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well 
install.packages("tidyverse")
install.packages("xml2")
require(tidyverse)
install.packages("tidyverse"), dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
q()
install.package('rvest')
install.packages('rvest')
install.packages("tidyverse", dependencies = TRUE)
q()
install.packages('rvest',dependencies = TRUE)
install.packages("tidyverse", dependencies = TRUE)
require(tidyverse)
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
updateR(admin_password = 'Trinidad')
updateR(admin_password = Trinidad)
updateR()
tibble::as_tibble(MyWrangledData) 
dplyr::glimpse(MyWrangledData)
dplyr::filter(MyWrangledData, Count>100) #like subset(), but nicer!
dplyr::slice(MyWrangledData, 10:15) # Look at an arbitrary set of data rows
source('SQLinR.R')
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF) #check the size of the data frame you loaded
str(MyDF)
require(tidyverse)
dplyr::glimpse(MyDF)
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
plot(MyDF$Predator.mass,MyDF$Prey.mass)
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass))
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20) # Change marker
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20, xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
hist(MyDF$Predator.mass)
hist(log10(MyDF$Predator.mass), xlab = "log10(Predator Mass (g))", ylab = "Count") # include labels
hist(log10(MyDF$Predator.mass),xlab="log10(Predator Mass (g))",ylab="Count", 
    col = "lightblue", border = "pink") # Change bar and borders colors 
par(mfcol=c(2,1)) #initialize multi-paneled plot
par(mfg = c(1,1)) # specify which sub-plot to use first 
hist(log10(MyDF$Predator.mass),
    xlab = "log10(Predator Mass (g))", ylab = "Count", col = "lightblue", border = "pink", 
    main = 'Predator') # Add title
par(mfg = c(2,1)) # Second sub-plot
hist(log10(MyDF$Prey.mass), xlab="log10(Prey Mass (g))",ylab="Count", col = "lightgreen", border = "pink", main = 'prey')
hist(log10(MyDF$Predator.mass), # Predator histogram
    xlab="log10(Body Mass (g))", ylab="Count", 
    col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
    main = "Predator-prey size Overlap") 
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
    fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors
boxplot(log10(MyDF$Predator.mass), xlab = "Location", ylab = "log10(Predator Mass)", main = "Predator mass")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Location, # Why the tilde?
    xlab = "Location", ylab = "Predator Mass",
    main = "Predator mass by location")
boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
    xlab = "Location", ylab = "Predator Mass",
    main = "Predator mass by feeding interaction type")
 par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
 plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
 par(fig=c(0,0.8,0.4,1), new=TRUE)
 boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
 par(fig=c(0.55,1,0,0.8),new=TRUE)
 boxplot(log(MyDF$Prey.mass), axes=FALSE)
 mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
pdf("../results/Pred_Prey_Overlay.pdf", # Open blank pdf page using a relative path
    11.7, 8.3) # These numbers are page dimensions in inches
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
    xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap") 
hist(log(MyDF$Prey.mass), # Plot prey weights
    col = rgb(0, 0, 1, 0.5), 
    add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
    fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) 
graphics.off(); #you can also use dev.off() 
require(ggplot2)
qplot(Prey.mass, Predator.mass, data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, asp = 1)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = Type.of.feeding.interaction, asp = 1)
qplot(log(Prey.mass), log(Predator.mass), 
    data = MyDF, colour = "red")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, alpha = I(.5))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, alpha = .5
q()
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"))
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"), 
      colour = Type.of.feeding.interaction) + geom_smooth(method = "lm")
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"),
      colour = Type.of.feeding.interaction) + geom_smooth(method = "lm",fullrange = TRUE)
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF)
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF, geom = "jitter")
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF, geom = "boxplot")
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram")
q()
data_set <- get(load("../data/KeyWestAnnualMeanTemperatures.RData"))
ls.str(data_set)
plot(data_set)
plot(data_set)
